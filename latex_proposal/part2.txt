abstract

Why asip in embedded systems?
application-specific instruction-set processors (ASIPs) deliver greater computational efficiencies than general purpose processors
Application Specific Instruction-set Processors(ASIPs) are designed
to exploit the special characteristics of an application or a set of applications
to meet the desired cost, performance and power requirements.
In the world of embedded-
processor systems that are geared to
solve a single application (or a limited
class
of applications) very efficiently,

what is scad/ exposed datapath architecture
how can scad aip be benificial/whats the claim in all

Synchronous-
control Asynchronous-data or SCAD is a new processor architecture which ex-
ploits a large amount of instruction-level parallelism. SCAD belongs therefore to
the family of exposed data path architectures pioneered by explicit data graph
execution (EDGE) architectures.

Due to its modular structure, SCAD is an ideal processor template for application-specific instruction-set processors (ASIP) (with customized datapath but without the inflexibility and design cost of fixed function hardware accelerators.)

Our aim here is to evaluate whether and how
SCAD could be used to implement application specific processor


intro

explain scad more 

SOA is asip generation in RISC machines but here we would like to evaluated if SCAD which is based on EDPA is beneficial in asip implementation

SCAD architecture eliminates the use of registers (which limits instruction-
level parallelism), and exposes not only the function units of the processor,
but also all the data paths between them. Synchronous control flow and asyn-
chronous data flow allows arbitrary latency for the function units and the com-
munication paths on the chip. Because of the flexibility and eliminated use of
registers, SCAD machine can implement large expressions found in programs
as application specific instructions and hence benefit from these special instruc-
tions

describe a brief approach

start with program in a high level language obtain appn specific instr from this prog intermediate representation use the best candidates as new instrn obtain a modified arch description generate code for this modified arch



approach

To evaluate whether SCAD could be implemented application specific processor,
we would like to extract application specific instruction from different applica-
tion and demonstrate the performance gain obtained by using a modified SCAD
with the help of a simulator. A program is nothing but a set of expression. An
expression can be represented by one big complex operation or set of small ba-
sic operations. The key idea is to identify all possible expression trees in the
program and calculate their occurrence frequency. Then we identify the most
suitable expression tree which is then implemented as application specific instruction
on SCAD. Next we evaluate the performance gain obtained from such an ap-
plication specific SCAD. The actual implementation of the specific instruction
in hardware could be done chaining the existing basic functional units or by
adding special functional units. This hardware implementation and evaluation
is out of the scope of this thesis.


